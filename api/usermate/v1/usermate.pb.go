// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.20.3
// source: api/usermate/v1/usermate.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeleteMateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMateRequest) Reset() {
	*x = DeleteMateRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMateRequest) ProtoMessage() {}

func (x *DeleteMateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMateRequest.ProtoReflect.Descriptor instead.
func (*DeleteMateRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteMateRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reply         *Reply                 `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMateReply) Reset() {
	*x = DeleteMateReply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMateReply) ProtoMessage() {}

func (x *DeleteMateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMateReply.ProtoReflect.Descriptor instead.
func (*DeleteMateReply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteMateReply) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type UserMateShowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Id            int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateShowRequest) Reset() {
	*x = UserMateShowRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateShowRequest) ProtoMessage() {}

func (x *UserMateShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateShowRequest.ProtoReflect.Descriptor instead.
func (*UserMateShowRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{2}
}

func (x *UserMateShowRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserMateShowRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserMateShowReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mateinfo      *UserMateInfo          `protobuf:"bytes,1,opt,name=mateinfo,proto3" json:"mateinfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateShowReply) Reset() {
	*x = UserMateShowReply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateShowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateShowReply) ProtoMessage() {}

func (x *UserMateShowReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateShowReply.ProtoReflect.Descriptor instead.
func (*UserMateShowReply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{3}
}

func (x *UserMateShowReply) GetMateinfo() *UserMateInfo {
	if x != nil {
		return x.Mateinfo
	}
	return nil
}

type UserMateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reply         *Reply                 `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateReply) Reset() {
	*x = UserMateReply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateReply) ProtoMessage() {}

func (x *UserMateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateReply.ProtoReflect.Descriptor instead.
func (*UserMateReply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{4}
}

func (x *UserMateReply) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{5}
}

func (x *Reply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Reply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 用户详情
type UserMateInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	GroupId       int32                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RealName      string                 `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Tags          string                 `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Birthday      string                 `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Hobby         string                 `protobuf:"bytes,6,opt,name=hobby,proto3" json:"hobby,omitempty"`
	Avatar        string                 `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname      string                 `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Images        string                 `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	Age           int32                  `protobuf:"varint,10,opt,name=age,proto3" json:"age,omitempty"`
	Province      string                 `protobuf:"bytes,11,opt,name=province,proto3" json:"province,omitempty"`
	Sign          string                 `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
	Videourl      string                 `protobuf:"bytes,13,opt,name=videourl,proto3" json:"videourl,omitempty"`
	Favorates     string                 `protobuf:"bytes,14,opt,name=favorates,proto3" json:"favorates,omitempty"`
	IsOnline      int32                  `protobuf:"varint,15,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	IsEmployee    int32                  `protobuf:"varint,16,opt,name=is_employee,json=isEmployee,proto3" json:"is_employee,omitempty"`
	IsApprov      int32                  `protobuf:"varint,18,opt,name=is_approv,json=isApprov,proto3" json:"is_approv,omitempty"`
	IsDeleted     int32                  `protobuf:"varint,19,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,20,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdateAt      string                 `protobuf:"bytes,21,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateInfo) Reset() {
	*x = UserMateInfo{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateInfo) ProtoMessage() {}

func (x *UserMateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateInfo.ProtoReflect.Descriptor instead.
func (*UserMateInfo) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{6}
}

func (x *UserMateInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserMateInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserMateInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserMateInfo) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *UserMateInfo) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserMateInfo) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *UserMateInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserMateInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserMateInfo) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *UserMateInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserMateInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserMateInfo) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *UserMateInfo) GetVideourl() string {
	if x != nil {
		return x.Videourl
	}
	return ""
}

func (x *UserMateInfo) GetFavorates() string {
	if x != nil {
		return x.Favorates
	}
	return ""
}

func (x *UserMateInfo) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *UserMateInfo) GetIsEmployee() int32 {
	if x != nil {
		return x.IsEmployee
	}
	return 0
}

func (x *UserMateInfo) GetIsApprov() int32 {
	if x != nil {
		return x.IsApprov
	}
	return 0
}

func (x *UserMateInfo) GetIsDeleted() int32 {
	if x != nil {
		return x.IsDeleted
	}
	return 0
}

func (x *UserMateInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UserMateInfo) GetUpdateAt() string {
	if x != nil {
		return x.UpdateAt
	}
	return ""
}

// 添加用户
type UserMateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	GroupId       int32                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RealName      string                 `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Tags          string                 `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Birthday      string                 `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Hobby         string                 `protobuf:"bytes,6,opt,name=hobby,proto3" json:"hobby,omitempty"`
	Avatar        string                 `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname      string                 `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Images        string                 `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	Age           int32                  `protobuf:"varint,10,opt,name=age,proto3" json:"age,omitempty"`
	Province      string                 `protobuf:"bytes,11,opt,name=province,proto3" json:"province,omitempty"`
	Sign          string                 `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
	Videourl      string                 `protobuf:"bytes,13,opt,name=videourl,proto3" json:"videourl,omitempty"`
	Favorates     string                 `protobuf:"bytes,14,opt,name=favorates,proto3" json:"favorates,omitempty"`
	IsOnline      int32                  `protobuf:"varint,15,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	IsEmployee    int32                  `protobuf:"varint,16,opt,name=is_employee,json=isEmployee,proto3" json:"is_employee,omitempty"`
	IsApprov      int32                  `protobuf:"varint,18,opt,name=is_approv,json=isApprov,proto3" json:"is_approv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateRequest) Reset() {
	*x = UserMateRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateRequest) ProtoMessage() {}

func (x *UserMateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateRequest.ProtoReflect.Descriptor instead.
func (*UserMateRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{7}
}

func (x *UserMateRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserMateRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserMateRequest) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserMateRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *UserMateRequest) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserMateRequest) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *UserMateRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserMateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserMateRequest) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *UserMateRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserMateRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserMateRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *UserMateRequest) GetVideourl() string {
	if x != nil {
		return x.Videourl
	}
	return ""
}

func (x *UserMateRequest) GetFavorates() string {
	if x != nil {
		return x.Favorates
	}
	return ""
}

func (x *UserMateRequest) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *UserMateRequest) GetIsEmployee() int32 {
	if x != nil {
		return x.IsEmployee
	}
	return 0
}

func (x *UserMateRequest) GetIsApprov() int32 {
	if x != nil {
		return x.IsApprov
	}
	return 0
}

// 更新用户请求
type UserMateUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	GroupId       int32                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RealName      string                 `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Tags          string                 `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Birthday      string                 `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Hobby         string                 `protobuf:"bytes,6,opt,name=hobby,proto3" json:"hobby,omitempty"`
	Avatar        string                 `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Nickname      string                 `protobuf:"bytes,8,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Images        string                 `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	Age           int32                  `protobuf:"varint,10,opt,name=age,proto3" json:"age,omitempty"`
	Province      string                 `protobuf:"bytes,11,opt,name=province,proto3" json:"province,omitempty"`
	Sign          string                 `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
	Videourl      string                 `protobuf:"bytes,13,opt,name=videourl,proto3" json:"videourl,omitempty"`
	Favorates     string                 `protobuf:"bytes,14,opt,name=favorates,proto3" json:"favorates,omitempty"`
	IsOnline      int32                  `protobuf:"varint,15,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	IsEmployee    int32                  `protobuf:"varint,16,opt,name=is_employee,json=isEmployee,proto3" json:"is_employee,omitempty"`
	IsApprov      int32                  `protobuf:"varint,18,opt,name=is_approv,json=isApprov,proto3" json:"is_approv,omitempty"`
	Uid           int32                  `protobuf:"varint,19,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateUpdateRequest) Reset() {
	*x = UserMateUpdateRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateUpdateRequest) ProtoMessage() {}

func (x *UserMateUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateUpdateRequest.ProtoReflect.Descriptor instead.
func (*UserMateUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{8}
}

func (x *UserMateUpdateRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserMateUpdateRequest) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UserMateUpdateRequest) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserMateUpdateRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *UserMateUpdateRequest) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserMateUpdateRequest) GetHobby() string {
	if x != nil {
		return x.Hobby
	}
	return ""
}

func (x *UserMateUpdateRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserMateUpdateRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserMateUpdateRequest) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *UserMateUpdateRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserMateUpdateRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserMateUpdateRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *UserMateUpdateRequest) GetVideourl() string {
	if x != nil {
		return x.Videourl
	}
	return ""
}

func (x *UserMateUpdateRequest) GetFavorates() string {
	if x != nil {
		return x.Favorates
	}
	return ""
}

func (x *UserMateUpdateRequest) GetIsOnline() int32 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *UserMateUpdateRequest) GetIsEmployee() int32 {
	if x != nil {
		return x.IsEmployee
	}
	return 0
}

func (x *UserMateUpdateRequest) GetIsApprov() int32 {
	if x != nil {
		return x.IsApprov
	}
	return 0
}

func (x *UserMateUpdateRequest) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 更新用户响应
type UserMateUpdateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMateUpdateReply) Reset() {
	*x = UserMateUpdateReply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMateUpdateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMateUpdateReply) ProtoMessage() {}

func (x *UserMateUpdateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMateUpdateReply.ProtoReflect.Descriptor instead.
func (*UserMateUpdateReply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{9}
}

func (x *UserMateUpdateReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserMateUpdateReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 创建订单请求
type CreateOrderRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OrderId         string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Uid             int32                  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	ServiceCategory int32                  `protobuf:"varint,3,opt,name=service_category,json=serviceCategory,proto3" json:"service_category,omitempty"`
	StartTime       string                 `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         string                 `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Amount          float32                `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Payment         int32                  `protobuf:"varint,7,opt,name=payment,proto3" json:"payment,omitempty"`
	Avatar          string                 `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	LinkUrl         string                 `protobuf:"bytes,9,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	IsOrderAfter    int32                  `protobuf:"varint,10,opt,name=is_order_after,json=isOrderAfter,proto3" json:"is_order_after,omitempty"`
	UserMateId      int32                  `protobuf:"varint,11,opt,name=user_mate_id,json=userMateId,proto3" json:"user_mate_id,omitempty"`
	// detail
	Gender              int32   `protobuf:"varint,12,opt,name=gender,proto3" json:"gender,omitempty"`
	Level               int32   `protobuf:"varint,13,opt,name=level,proto3" json:"level,omitempty"`
	Duration            int32   `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`
	ServiceCategoryName string  `protobuf:"bytes,15,opt,name=service_category_name,json=serviceCategoryName,proto3" json:"service_category_name,omitempty"`
	ServiceCategoryId   int32   `protobuf:"varint,16,opt,name=service_category_id,json=serviceCategoryId,proto3" json:"service_category_id,omitempty"`
	Wechat              string  `protobuf:"bytes,17,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Note                string  `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	Discount            float32 `protobuf:"fixed32,19,opt,name=discount,proto3" json:"discount,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{10}
}

func (x *CreateOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateOrderRequest) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CreateOrderRequest) GetServiceCategory() int32 {
	if x != nil {
		return x.ServiceCategory
	}
	return 0
}

func (x *CreateOrderRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateOrderRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *CreateOrderRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateOrderRequest) GetPayment() int32 {
	if x != nil {
		return x.Payment
	}
	return 0
}

func (x *CreateOrderRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CreateOrderRequest) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *CreateOrderRequest) GetIsOrderAfter() int32 {
	if x != nil {
		return x.IsOrderAfter
	}
	return 0
}

func (x *CreateOrderRequest) GetUserMateId() int32 {
	if x != nil {
		return x.UserMateId
	}
	return 0
}

func (x *CreateOrderRequest) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CreateOrderRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CreateOrderRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateOrderRequest) GetServiceCategoryName() string {
	if x != nil {
		return x.ServiceCategoryName
	}
	return ""
}

func (x *CreateOrderRequest) GetServiceCategoryId() int32 {
	if x != nil {
		return x.ServiceCategoryId
	}
	return 0
}

func (x *CreateOrderRequest) GetWechat() string {
	if x != nil {
		return x.Wechat
	}
	return ""
}

func (x *CreateOrderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateOrderRequest) GetDiscount() float32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

// 创建订单响应
type CreateOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UserMateId    int32                  `protobuf:"varint,3,opt,name=user_mate_id,json=userMateId,proto3" json:"user_mate_id,omitempty"`
	UserMateName  string                 `protobuf:"bytes,4,opt,name=user_mate_name,json=userMateName,proto3" json:"user_mate_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrderReply) Reset() {
	*x = CreateOrderReply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderReply) ProtoMessage() {}

func (x *CreateOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderReply.ProtoReflect.Descriptor instead.
func (*CreateOrderReply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{11}
}

func (x *CreateOrderReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateOrderReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateOrderReply) GetUserMateId() int32 {
	if x != nil {
		return x.UserMateId
	}
	return 0
}

func (x *CreateOrderReply) GetUserMateName() string {
	if x != nil {
		return x.UserMateName
	}
	return ""
}

// 更新订单请求
type UpdateOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateOrderRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type UpdateOrderReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UpdateTime    string                 `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrderReply) Reset() {
	*x = UpdateOrderReply{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderReply) ProtoMessage() {}

func (x *UpdateOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderReply.ProtoReflect.Descriptor instead.
func (*UpdateOrderReply) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateOrderReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateOrderReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateOrderReply) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 搜索用户请求
type SearchUserMateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserMateRequest) Reset() {
	*x = SearchUserMateRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserMateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserMateRequest) ProtoMessage() {}

func (x *SearchUserMateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserMateRequest.ProtoReflect.Descriptor instead.
func (*SearchUserMateRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{14}
}

func (x *SearchUserMateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 搜索用户响应
type SearchUserMateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mateinfo      []*UserMateInfo        `protobuf:"bytes,1,rep,name=mateinfo,proto3" json:"mateinfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserMateResponse) Reset() {
	*x = SearchUserMateResponse{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserMateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserMateResponse) ProtoMessage() {}

func (x *SearchUserMateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserMateResponse.ProtoReflect.Descriptor instead.
func (*SearchUserMateResponse) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{15}
}

func (x *SearchUserMateResponse) GetMateinfo() []*UserMateInfo {
	if x != nil {
		return x.Mateinfo
	}
	return nil
}

// 订单请求
type OrderDetailRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderDetailRequest) Reset() {
	*x = OrderDetailRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailRequest) ProtoMessage() {}

func (x *OrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailRequest.ProtoReflect.Descriptor instead.
func (*OrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{16}
}

func (x *OrderDetailRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// 展示详情
type OrderDetailResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OrderId         string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Uid             int32                  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	ServiceCategory int32                  `protobuf:"varint,3,opt,name=service_category,json=serviceCategory,proto3" json:"service_category,omitempty"`
	StartTime       string                 `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         string                 `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Amount          float64                `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Payment         int32                  `protobuf:"varint,7,opt,name=payment,proto3" json:"payment,omitempty"`
	Avatar          string                 `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	LinkUrl         string                 `protobuf:"bytes,9,opt,name=link_url,json=linkUrl,proto3" json:"link_url,omitempty"`
	IsOrderAfter    int32                  `protobuf:"varint,10,opt,name=is_order_after,json=isOrderAfter,proto3" json:"is_order_after,omitempty"`
	UserMateId      int32                  `protobuf:"varint,11,opt,name=user_mate_id,json=userMateId,proto3" json:"user_mate_id,omitempty"`
	// detail
	Gender              int32  `protobuf:"varint,12,opt,name=gender,proto3" json:"gender,omitempty"`
	Level               int32  `protobuf:"varint,13,opt,name=level,proto3" json:"level,omitempty"`
	Duration            int32  `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`
	ServiceCategoryName string `protobuf:"bytes,15,opt,name=service_category_name,json=serviceCategoryName,proto3" json:"service_category_name,omitempty"`
	ServiceCategoryId   int32  `protobuf:"varint,16,opt,name=service_category_id,json=serviceCategoryId,proto3" json:"service_category_id,omitempty"`
	Wechat              string `protobuf:"bytes,17,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Note                string `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OrderDetailResponse) Reset() {
	*x = OrderDetailResponse{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailResponse) ProtoMessage() {}

func (x *OrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailResponse.ProtoReflect.Descriptor instead.
func (*OrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{17}
}

func (x *OrderDetailResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderDetailResponse) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *OrderDetailResponse) GetServiceCategory() int32 {
	if x != nil {
		return x.ServiceCategory
	}
	return 0
}

func (x *OrderDetailResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *OrderDetailResponse) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *OrderDetailResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderDetailResponse) GetPayment() int32 {
	if x != nil {
		return x.Payment
	}
	return 0
}

func (x *OrderDetailResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *OrderDetailResponse) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *OrderDetailResponse) GetIsOrderAfter() int32 {
	if x != nil {
		return x.IsOrderAfter
	}
	return 0
}

func (x *OrderDetailResponse) GetUserMateId() int32 {
	if x != nil {
		return x.UserMateId
	}
	return 0
}

func (x *OrderDetailResponse) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *OrderDetailResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *OrderDetailResponse) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *OrderDetailResponse) GetServiceCategoryName() string {
	if x != nil {
		return x.ServiceCategoryName
	}
	return ""
}

func (x *OrderDetailResponse) GetServiceCategoryId() int32 {
	if x != nil {
		return x.ServiceCategoryId
	}
	return 0
}

func (x *OrderDetailResponse) GetWechat() string {
	if x != nil {
		return x.Wechat
	}
	return ""
}

func (x *OrderDetailResponse) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ListMateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Pagesize      int32                  `protobuf:"varint,2,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMateRequest) Reset() {
	*x = ListMateRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMateRequest) ProtoMessage() {}

func (x *ListMateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMateRequest.ProtoReflect.Descriptor instead.
func (*ListMateRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{18}
}

func (x *ListMateRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMateRequest) GetPagesize() int32 {
	if x != nil {
		return x.Pagesize
	}
	return 0
}

type ListMateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*UserMateInfo        `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMateResponse) Reset() {
	*x = ListMateResponse{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMateResponse) ProtoMessage() {}

func (x *ListMateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMateResponse.ProtoReflect.Descriptor instead.
func (*ListMateResponse) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{19}
}

func (x *ListMateResponse) GetList() []*UserMateInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type OrderListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CustomerId    int32                  `protobuf:"varint,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderListRequest) Reset() {
	*x = OrderListRequest{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListRequest) ProtoMessage() {}

func (x *OrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListRequest.ProtoReflect.Descriptor instead.
func (*OrderListRequest) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{20}
}

func (x *OrderListRequest) GetCustomerId() int32 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

// 订单列表
type OrderListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*OrderDetailResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderListResponse) Reset() {
	*x = OrderListResponse{}
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListResponse) ProtoMessage() {}

func (x *OrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_usermate_v1_usermate_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListResponse.ProtoReflect.Descriptor instead.
func (*OrderListResponse) Descriptor() ([]byte, []int) {
	return file_api_usermate_v1_usermate_proto_rawDescGZIP(), []int{21}
}

func (x *OrderListResponse) GetData() []*OrderDetailResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_usermate_v1_usermate_proto protoreflect.FileDescriptor

var file_api_usermate_v1_usermate_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4a, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4,
	0x04, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f,
	0x62, 0x62, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x73, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x22, 0xe6, 0x03, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0x43, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55,
	0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x88, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x04, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a,
	0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x49, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x86, 0x09,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x64, 0x64, 0x12, 0x70, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x74, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x74, 0x65,
	0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74,
	0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x6e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a,
	0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x4c, 0x0a, 0x1a, 0x64, 0x65, 0x76, 0x2e, 0x6b, 0x72,
	0x61, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_usermate_v1_usermate_proto_rawDescOnce sync.Once
	file_api_usermate_v1_usermate_proto_rawDescData []byte
)

func file_api_usermate_v1_usermate_proto_rawDescGZIP() []byte {
	file_api_usermate_v1_usermate_proto_rawDescOnce.Do(func() {
		file_api_usermate_v1_usermate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_usermate_v1_usermate_proto_rawDesc), len(file_api_usermate_v1_usermate_proto_rawDesc)))
	})
	return file_api_usermate_v1_usermate_proto_rawDescData
}

var file_api_usermate_v1_usermate_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_usermate_v1_usermate_proto_goTypes = []any{
	(*DeleteMateRequest)(nil),      // 0: usermate.v1.DeleteMateRequest
	(*DeleteMateReply)(nil),        // 1: usermate.v1.DeleteMateReply
	(*UserMateShowRequest)(nil),    // 2: usermate.v1.UserMateShowRequest
	(*UserMateShowReply)(nil),      // 3: usermate.v1.UserMateShowReply
	(*UserMateReply)(nil),          // 4: usermate.v1.UserMateReply
	(*Reply)(nil),                  // 5: usermate.v1.Reply
	(*UserMateInfo)(nil),           // 6: usermate.v1.UserMateInfo
	(*UserMateRequest)(nil),        // 7: usermate.v1.UserMateRequest
	(*UserMateUpdateRequest)(nil),  // 8: usermate.v1.UserMateUpdateRequest
	(*UserMateUpdateReply)(nil),    // 9: usermate.v1.UserMateUpdateReply
	(*CreateOrderRequest)(nil),     // 10: usermate.v1.CreateOrderRequest
	(*CreateOrderReply)(nil),       // 11: usermate.v1.CreateOrderReply
	(*UpdateOrderRequest)(nil),     // 12: usermate.v1.UpdateOrderRequest
	(*UpdateOrderReply)(nil),       // 13: usermate.v1.UpdateOrderReply
	(*SearchUserMateRequest)(nil),  // 14: usermate.v1.SearchUserMateRequest
	(*SearchUserMateResponse)(nil), // 15: usermate.v1.SearchUserMateResponse
	(*OrderDetailRequest)(nil),     // 16: usermate.v1.OrderDetailRequest
	(*OrderDetailResponse)(nil),    // 17: usermate.v1.OrderDetailResponse
	(*ListMateRequest)(nil),        // 18: usermate.v1.ListMateRequest
	(*ListMateResponse)(nil),       // 19: usermate.v1.ListMateResponse
	(*OrderListRequest)(nil),       // 20: usermate.v1.OrderListRequest
	(*OrderListResponse)(nil),      // 21: usermate.v1.OrderListResponse
}
var file_api_usermate_v1_usermate_proto_depIdxs = []int32{
	5,  // 0: usermate.v1.DeleteMateReply.reply:type_name -> usermate.v1.Reply
	6,  // 1: usermate.v1.UserMateShowReply.mateinfo:type_name -> usermate.v1.UserMateInfo
	5,  // 2: usermate.v1.UserMateReply.reply:type_name -> usermate.v1.Reply
	6,  // 3: usermate.v1.SearchUserMateResponse.mateinfo:type_name -> usermate.v1.UserMateInfo
	6,  // 4: usermate.v1.ListMateResponse.list:type_name -> usermate.v1.UserMateInfo
	17, // 5: usermate.v1.OrderListResponse.data:type_name -> usermate.v1.OrderDetailResponse
	7,  // 6: usermate.v1.UserMate.AddUserMate:input_type -> usermate.v1.UserMateRequest
	0,  // 7: usermate.v1.UserMate.DeleteUserMate:input_type -> usermate.v1.DeleteMateRequest
	2,  // 8: usermate.v1.UserMate.UserMateDetail:input_type -> usermate.v1.UserMateShowRequest
	8,  // 9: usermate.v1.UserMate.UpdateUserMate:input_type -> usermate.v1.UserMateUpdateRequest
	18, // 10: usermate.v1.UserMate.ListUserMate:input_type -> usermate.v1.ListMateRequest
	14, // 11: usermate.v1.UserMate.SearchUserMate:input_type -> usermate.v1.SearchUserMateRequest
	10, // 12: usermate.v1.UserMate.CreateOrder:input_type -> usermate.v1.CreateOrderRequest
	12, // 13: usermate.v1.UserMate.UpdateOrder:input_type -> usermate.v1.UpdateOrderRequest
	20, // 14: usermate.v1.UserMate.OrderList:input_type -> usermate.v1.OrderListRequest
	16, // 15: usermate.v1.UserMate.OrderDetail:input_type -> usermate.v1.OrderDetailRequest
	4,  // 16: usermate.v1.UserMate.AddUserMate:output_type -> usermate.v1.UserMateReply
	1,  // 17: usermate.v1.UserMate.DeleteUserMate:output_type -> usermate.v1.DeleteMateReply
	3,  // 18: usermate.v1.UserMate.UserMateDetail:output_type -> usermate.v1.UserMateShowReply
	9,  // 19: usermate.v1.UserMate.UpdateUserMate:output_type -> usermate.v1.UserMateUpdateReply
	19, // 20: usermate.v1.UserMate.ListUserMate:output_type -> usermate.v1.ListMateResponse
	15, // 21: usermate.v1.UserMate.SearchUserMate:output_type -> usermate.v1.SearchUserMateResponse
	11, // 22: usermate.v1.UserMate.CreateOrder:output_type -> usermate.v1.CreateOrderReply
	13, // 23: usermate.v1.UserMate.UpdateOrder:output_type -> usermate.v1.UpdateOrderReply
	21, // 24: usermate.v1.UserMate.OrderList:output_type -> usermate.v1.OrderListResponse
	17, // 25: usermate.v1.UserMate.OrderDetail:output_type -> usermate.v1.OrderDetailResponse
	16, // [16:26] is the sub-list for method output_type
	6,  // [6:16] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_usermate_v1_usermate_proto_init() }
func file_api_usermate_v1_usermate_proto_init() {
	if File_api_usermate_v1_usermate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_usermate_v1_usermate_proto_rawDesc), len(file_api_usermate_v1_usermate_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_usermate_v1_usermate_proto_goTypes,
		DependencyIndexes: file_api_usermate_v1_usermate_proto_depIdxs,
		MessageInfos:      file_api_usermate_v1_usermate_proto_msgTypes,
	}.Build()
	File_api_usermate_v1_usermate_proto = out.File
	file_api_usermate_v1_usermate_proto_goTypes = nil
	file_api_usermate_v1_usermate_proto_depIdxs = nil
}
