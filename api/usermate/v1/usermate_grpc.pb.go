// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api/usermate/v1/usermate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserMate_AddUserMate_FullMethodName    = "/usermate.v1.UserMate/AddUserMate"
	UserMate_DeleteUserMate_FullMethodName = "/usermate.v1.UserMate/DeleteUserMate"
	UserMate_UserMateDetail_FullMethodName = "/usermate.v1.UserMate/UserMateDetail"
	UserMate_UpdateUserMate_FullMethodName = "/usermate.v1.UserMate/UpdateUserMate"
	UserMate_ListUserMate_FullMethodName   = "/usermate.v1.UserMate/ListUserMate"
	UserMate_SearchUserMate_FullMethodName = "/usermate.v1.UserMate/SearchUserMate"
	UserMate_CreateOrder_FullMethodName    = "/usermate.v1.UserMate/CreateOrder"
	UserMate_UpdateOrder_FullMethodName    = "/usermate.v1.UserMate/UpdateOrder"
	UserMate_OrderList_FullMethodName      = "/usermate.v1.UserMate/OrderList"
	UserMate_OrderDetail_FullMethodName    = "/usermate.v1.UserMate/OrderDetail"
)

// UserMateClient is the client API for UserMate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserMateClient interface {
	// user mate add
	AddUserMate(ctx context.Context, in *UserMateRequest, opts ...grpc.CallOption) (*UserMateReply, error)
	// user mate delete
	DeleteUserMate(ctx context.Context, in *DeleteMateRequest, opts ...grpc.CallOption) (*DeleteMateReply, error)
	// user mates detail show
	UserMateDetail(ctx context.Context, in *UserMateShowRequest, opts ...grpc.CallOption) (*UserMateShowReply, error)
	// user mate update data
	UpdateUserMate(ctx context.Context, in *UserMateUpdateRequest, opts ...grpc.CallOption) (*UserMateUpdateReply, error)
	// usermate list
	ListUserMate(ctx context.Context, in *ListMateRequest, opts ...grpc.CallOption) (*ListMateResponse, error)
	SearchUserMate(ctx context.Context, in *SearchUserMateRequest, opts ...grpc.CallOption) (*SearchUserMateResponse, error)
	// create order
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error)
	// update order
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderReply, error)
	// order list
	OrderList(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error)
	// order detail
	OrderDetail(ctx context.Context, in *OrderDetailRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error)
}

type userMateClient struct {
	cc grpc.ClientConnInterface
}

func NewUserMateClient(cc grpc.ClientConnInterface) UserMateClient {
	return &userMateClient{cc}
}

func (c *userMateClient) AddUserMate(ctx context.Context, in *UserMateRequest, opts ...grpc.CallOption) (*UserMateReply, error) {
	out := new(UserMateReply)
	err := c.cc.Invoke(ctx, UserMate_AddUserMate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) DeleteUserMate(ctx context.Context, in *DeleteMateRequest, opts ...grpc.CallOption) (*DeleteMateReply, error) {
	out := new(DeleteMateReply)
	err := c.cc.Invoke(ctx, UserMate_DeleteUserMate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) UserMateDetail(ctx context.Context, in *UserMateShowRequest, opts ...grpc.CallOption) (*UserMateShowReply, error) {
	out := new(UserMateShowReply)
	err := c.cc.Invoke(ctx, UserMate_UserMateDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) UpdateUserMate(ctx context.Context, in *UserMateUpdateRequest, opts ...grpc.CallOption) (*UserMateUpdateReply, error) {
	out := new(UserMateUpdateReply)
	err := c.cc.Invoke(ctx, UserMate_UpdateUserMate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) ListUserMate(ctx context.Context, in *ListMateRequest, opts ...grpc.CallOption) (*ListMateResponse, error) {
	out := new(ListMateResponse)
	err := c.cc.Invoke(ctx, UserMate_ListUserMate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) SearchUserMate(ctx context.Context, in *SearchUserMateRequest, opts ...grpc.CallOption) (*SearchUserMateResponse, error) {
	out := new(SearchUserMateResponse)
	err := c.cc.Invoke(ctx, UserMate_SearchUserMate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, UserMate_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderReply, error) {
	out := new(UpdateOrderReply)
	err := c.cc.Invoke(ctx, UserMate_UpdateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) OrderList(ctx context.Context, in *OrderListRequest, opts ...grpc.CallOption) (*OrderListResponse, error) {
	out := new(OrderListResponse)
	err := c.cc.Invoke(ctx, UserMate_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userMateClient) OrderDetail(ctx context.Context, in *OrderDetailRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error) {
	out := new(OrderDetailResponse)
	err := c.cc.Invoke(ctx, UserMate_OrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserMateServer is the server API for UserMate service.
// All implementations must embed UnimplementedUserMateServer
// for forward compatibility
type UserMateServer interface {
	// user mate add
	AddUserMate(context.Context, *UserMateRequest) (*UserMateReply, error)
	// user mate delete
	DeleteUserMate(context.Context, *DeleteMateRequest) (*DeleteMateReply, error)
	// user mates detail show
	UserMateDetail(context.Context, *UserMateShowRequest) (*UserMateShowReply, error)
	// user mate update data
	UpdateUserMate(context.Context, *UserMateUpdateRequest) (*UserMateUpdateReply, error)
	// usermate list
	ListUserMate(context.Context, *ListMateRequest) (*ListMateResponse, error)
	SearchUserMate(context.Context, *SearchUserMateRequest) (*SearchUserMateResponse, error)
	// create order
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	// update order
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderReply, error)
	// order list
	OrderList(context.Context, *OrderListRequest) (*OrderListResponse, error)
	// order detail
	OrderDetail(context.Context, *OrderDetailRequest) (*OrderDetailResponse, error)
	mustEmbedUnimplementedUserMateServer()
}

// UnimplementedUserMateServer must be embedded to have forward compatible implementations.
type UnimplementedUserMateServer struct {
}

func (UnimplementedUserMateServer) AddUserMate(context.Context, *UserMateRequest) (*UserMateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserMate not implemented")
}
func (UnimplementedUserMateServer) DeleteUserMate(context.Context, *DeleteMateRequest) (*DeleteMateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMate not implemented")
}
func (UnimplementedUserMateServer) UserMateDetail(context.Context, *UserMateShowRequest) (*UserMateShowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMateDetail not implemented")
}
func (UnimplementedUserMateServer) UpdateUserMate(context.Context, *UserMateUpdateRequest) (*UserMateUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMate not implemented")
}
func (UnimplementedUserMateServer) ListUserMate(context.Context, *ListMateRequest) (*ListMateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMate not implemented")
}
func (UnimplementedUserMateServer) SearchUserMate(context.Context, *SearchUserMateRequest) (*SearchUserMateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserMate not implemented")
}
func (UnimplementedUserMateServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedUserMateServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedUserMateServer) OrderList(context.Context, *OrderListRequest) (*OrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedUserMateServer) OrderDetail(context.Context, *OrderDetailRequest) (*OrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDetail not implemented")
}
func (UnimplementedUserMateServer) mustEmbedUnimplementedUserMateServer() {}

// UnsafeUserMateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserMateServer will
// result in compilation errors.
type UnsafeUserMateServer interface {
	mustEmbedUnimplementedUserMateServer()
}

func RegisterUserMateServer(s grpc.ServiceRegistrar, srv UserMateServer) {
	s.RegisterService(&UserMate_ServiceDesc, srv)
}

func _UserMate_AddUserMate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).AddUserMate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_AddUserMate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).AddUserMate(ctx, req.(*UserMateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_DeleteUserMate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).DeleteUserMate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_DeleteUserMate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).DeleteUserMate(ctx, req.(*DeleteMateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_UserMateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMateShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).UserMateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_UserMateDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).UserMateDetail(ctx, req.(*UserMateShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_UpdateUserMate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).UpdateUserMate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_UpdateUserMate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).UpdateUserMate(ctx, req.(*UserMateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_ListUserMate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).ListUserMate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_ListUserMate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).ListUserMate(ctx, req.(*ListMateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_SearchUserMate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserMateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).SearchUserMate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_SearchUserMate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).SearchUserMate(ctx, req.(*SearchUserMateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).OrderList(ctx, req.(*OrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMate_OrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserMateServer).OrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserMate_OrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserMateServer).OrderDetail(ctx, req.(*OrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMate_ServiceDesc is the grpc.ServiceDesc for UserMate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermate.v1.UserMate",
	HandlerType: (*UserMateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserMate",
			Handler:    _UserMate_AddUserMate_Handler,
		},
		{
			MethodName: "DeleteUserMate",
			Handler:    _UserMate_DeleteUserMate_Handler,
		},
		{
			MethodName: "UserMateDetail",
			Handler:    _UserMate_UserMateDetail_Handler,
		},
		{
			MethodName: "UpdateUserMate",
			Handler:    _UserMate_UpdateUserMate_Handler,
		},
		{
			MethodName: "ListUserMate",
			Handler:    _UserMate_ListUserMate_Handler,
		},
		{
			MethodName: "SearchUserMate",
			Handler:    _UserMate_SearchUserMate_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _UserMate_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _UserMate_UpdateOrder_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _UserMate_OrderList_Handler,
		},
		{
			MethodName: "OrderDetail",
			Handler:    _UserMate_OrderDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/usermate/v1/usermate.proto",
}
